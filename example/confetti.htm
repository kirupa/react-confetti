
<!DOCTYPE html>
<html>
<head>
<title>It's Confetti Time!</title>
<style>
    body {
      margin: 0;
    }
    h1 {
      font-family: sans-serif;
      color: #CCC;
      padding: 10px;
    }
  </style>
</head>
<body>
<h1>Confetti Generator</h1>
<canvas id="confetti"></canvas>
<script>
	//
	// Utility Functions
	//
	function randomRange(min, max) {
	  return min + (Math.random() * (max - min));
	}
	  
   	function distance(p0, p1) {
	  const dx = p1.x - p0.x
	  const dy = p1.y - p0.y
	  return Math.sqrt((dx * dx) + (dy * dy));
	}

	function distanceXY(x0, y0, x1, y1) {
	  const dx = x1 - x0
	  const dy = y1 - y0
	  return Math.sqrt((dx * dx) + (dy * dy));
	}

	function circleCollision(c0, c1) {
	  return distance(c0, c1) <= c0.radius + c1.radius;
	}
	  
	function degreesToRads(degrees) {
	  return degrees / (180 * Math.PI);
	}

	function radsToDegrees(radians) {
	  return (radians * 180) / Math.PI;
	}
	  
 	function rangeIntersect(min0, max0, min1, max1) {
	  return Math.max(min0, max0) >= Math.min(min1, max1) &&
			 Math.min(min0, max0) <= Math.max(min1, max1);
	}
	  
  	function randomInt(min, max) {
      return min + Math.random() * (max - min);
    }

    function clamp(value, min, max) {
      return Math.min(Math.max(value, Math.min(min, max)), Math.max(min, max));
    }
	  
	function roundedRandomInt(min, max) {
	  return Math.floor(min + (Math.random() * ((max - min) + 1)));
	}

    //
    //
    // Actual Code for
    // Generating Confetti!!!
    //
    //

    // confetti settings!
    var gravity = .1;
    var friction = .99;
    var wind = 0;
    var numberOfParticles = 100;

    canvas = document.getElementById("confetti");
    var context = canvas.getContext('2d');
    W = canvas.width = window.innerWidth;
    H = canvas.height = window.innerHeight;
    generatorStock = [];

    colors = [
      '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
      '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50',
      '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',
      '#FF5722', '#795548'
    ];

    var generator = new particleGenerator(0, 0, W, 0, numberOfParticles);

    function loadImage(url) {
      var img = document.createElement("img");
      img.src = url;
      return img;
    }

    var mouse = {
      x: 0,
      y: 0
    };
    
    canvas.addEventListener('mousemove', function (e) {
      mouse.x = e.pageX - this.offsetLeft;
      mouse.y = e.pageY - this.offsetTop;
    }, false);

    function particle(x, y) {
      this.radius = randomInt(.1, 1);
      this.x = x;
      this.y = y;
      this.vx = randomInt(-4, 4);
      this.vy = randomInt(-10, -0);
      this.type = roundedRandomInt(0, 1);

      this.w = randomRange(5, 20);
      this.h = randomRange(5, 20);

      this.r = randomRange(5, 10);

      this.angle = degreesToRads(randomInt(0, 360));
      this.anglespin = randomInt(-0.2, 0.2);
      this.color = colors[Math.floor(Math.random() * colors.length)];

      this.rotateY = randomInt(0, 1);

    }

    particle.prototype.update = function () {
      this.x += this.vx;
      this.y += this.vy;
      this.vy += gravity;
      this.vx += wind;
      this.vx *= friction;
      this.vy *= friction;
      this.radius -= .02;

      if (this.rotateY < 1) {
        this.rotateY += 0.1;

      } else {
        this.rotateY = -1;

      }
      this.angle += this.anglespin;

      context.save();
      context.translate(this.x, this.y);
      context.rotate(this.angle);

      context.scale(1, this.rotateY);

      context.rotate(this.angle);
      context.beginPath();
      context.fillStyle = this.color;
      context.strokeStyle = this.color;
      context.lineCap = "round";
      context.lineWidth = 2;

      if (this.type === 0) {
        context.beginPath();
        context.arc(0, 0, this.r, 0, 2 * Math.PI);
        context.fill();
      } else if (this.type === 2) {
        context.beginPath();
        for (i = 0; i < 22; i++) {
          angle = 0.5 * i;
          x = (.2 + 1.5 * angle) * Math.cos(angle);
          y = (.2 + 1.5 * angle) * Math.sin(angle);

          context.lineTo(x, y);
        }
        context.stroke();

      } else if (this.type === 1) {
        context.fillRect(-this.w / 2, -this.h / 2, this.w, this.h);
      }

      context.closePath();
      context.restore();
    }

    function particleGenerator(x, y, w, h, number, text) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.number = number;
      this.particles = [];
      this.text = text;
      this.recycle = true;

      this.type = 1;
    }

    particleGenerator.prototype.animate = function () {
      context.fillStyle = "grey";

      context.beginPath();
      context.strokeRect(this.x, this.y, this.w, this.h);

      context.font = "13px arial";
      context.textAlign = "center";

      context.closePath();
  
      if (this.particles.length < this.number) {
        this.particles.push(new particle(clamp(randomInt(this.x, this.w + this.x), this.x, this.w + this.x),

          clamp(randomInt(this.y, this.h + this.y), this.y, this.h + this.y), this.text));
      }

      if (this.particles.length > this.number) {
        this.particles.length = this.number;
      }

      for (var i = 0; i < this.particles.length; i++) {
        p = this.particles[i];
        p.update();
        if (p.y > H || p.y < -100 || p.x > W + 100 || p.x < -100 && this.recycle) {
          this.particles[i] = new particle(clamp(randomInt(this.x, this.w + this.x), this.x, this.w + this.x),
          	clamp(randomInt(this.y, this.h + this.y), this.y, this.h + this.y), this.text);
        }
      }
    }

    function toggleEngine() {
      if (generator.type === 0) {
        generator.type = 1;
        generator.x = W / 2;
        generator.y = H / 2;
        generator.w = 0;

      } else {
        generator.type = 0;
        generator.x = 1;
        generator.w = W;
        generator.y = 0;

      }
    }

    function update() {
      generator.number = numberOfParticles;;

      context.fillStyle = "white"; 
      context.clearRect(0, 0, W, H);
      generator.animate();
      requestAnimationFrame(update);
    }

    //
    // Kick things off!
    //
    toggleEngine();
    update();
  </script>
</body>
</html>
